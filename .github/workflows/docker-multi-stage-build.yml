name: docker multi-stage build

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      # AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR 로그인
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      # Docker 이미지 빌드 및 ECR에 Push
      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: game_mate
          IMAGE_TAG: latest
          MYSQL_USERNAME: "${{ secrets.MYSQL_USERNAME }}"
          MYSQL_PASSWORD: "${{ secrets.MYSQL_PASSWORD }}"
          MYSQL_URL: "${{ secrets.MYSQL_URL }}"
          JPA_HIBERNATE_DDL: "${{ secrets.JPA_HIBERNATE_DDL }}"
          JWT_SECRET: "${{ secrets.JWT_SECRET }}"
          YOUR_ACCESS_KEY: "${{ secrets.YOUR_ACCESS_KEY }}"
          YOUR_SECRET_KEY: "${{ secrets.YOUR_SECRET_KEY }}"
          YOUR_BUCKET_NAME: "${{ secrets.YOUR_BUCKET_NAME }}"
          OAUTH2_GOOGLE_CLIENT_ID: "${{ secrets.OAUTH2_GOOGLE_CLIENT_ID }}"
          OAUTH2_GOOGLE_CLIENT_SECRET: "${{ secrets.OAUTH2_GOOGLE_CLIENT_SECRET }}"
          OAUTH2_KAKAO_CLIENT_ID: "${{ secrets.OAUTH2_KAKAO_CLIENT_ID }}"
          OAUTH2_KAKAO_CLIENT_SECRET: "${{ secrets.OAUTH2_KAKAO_CLIENT_SECRET }}"
          EMAIL_USERNAME: "${{ secrets.EMAIL_USERNAME }}"
          EMAIL_APP_PASSWORD: "${{ secrets.EMAIL_APP_PASSWORD }}"
          GEMINI_URL: "${{ secrets.GEMINI_URL }}"
          GEMINI_KEY: "${{ secrets.GEMINI_KEY }}"
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # deploy.sh & docker-compose.yml을 EC2로 업로드
      - name: Upload deploy script and docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "./deploy.sh, ./docker-compose.yml"
          target: "/home/ubuntu/"

      # EC2에서 deploy.sh 실행 (최신 Docker 이미지 가져와서 실행)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            chmod +x /home/ubuntu/deploy.sh
            /home/ubuntu/deploy.sh